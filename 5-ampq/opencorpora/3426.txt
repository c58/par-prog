Принципиальная неэффективность использования несвободного программного обеспечения в образовательном процессе на примере СГА
Данная работа подробно освещает вопрос неэффективности внедрения несвободного программного обеспечения, приводя в качестве примера использование проприетарного ПО для реализации дистанционного обучения в СГА.
В главе 1 даётся общее понятие о свободном и несвободном программном обеспечении.
В главе 2 описаны сферы применения как свободного, так и несвободного программного обеспечения. Упомянута полная заменяемость наиболее распространённых офисных приложений.
В главе 3 перечислены и подробно рассмотрены пять категорий проблем (нестабильность, зависимость от разработчика, зависимость от проприетарных технологий, операционные расходы и расходы на перепроектирование), возникающих в связи с внедрением несвободного программного обеспечения. Приведены примеры, в которых показано, что эти проблемы способны скомпрометировать образовательный процесс СГА.
Введение
В настоящее время достаточно широко распространено использование несвободного (проприетарного, запатентованного и с закрытым исходным кодом) программного обеспечения. Как правило, среднестатистическая компания ограничивается стандартными офисными приложениями (редакторы текстовых документов, электронные таблицы и т. д.) и/или средствами работы с графикой. Однако внедрение специализированного (написанного по заказу для этой компании сторонним разработчиком, направленного на чрезвычайно узкую область применения и т. д.) несвободного программного обеспечения в производство может вызвать целый ряд сложноустранимых проблем, платить за которые приходится компании-пользователю.
Настоящая работа описывает типичные проблемы, с которыми постоянно сталкиваются пользователи несвободного ПО. Продемонстрировано существование и возможность появления в любой момент этих проблем в связи с использованием несвободного ПО в образовательном процессе СГА.
1. Понятие о свободном и несвободном программном обеспечении
Свободным программным обеспечением называется программа, на использование которой не накладывается и не может быть наложено никаких ограничений, что гарантируется особой лицензией (свободная лицензия). В частности, разрешается неограниченное использование, копирование и, что главное, модификация программного обеспечения. Для удовлетворения последнему требованию свободные лицензии предусматривают открытость исходного кода приложения; в случае обнаружения ошибок или необходимости добавить новую функциональность любой программист может внести соответствующие исправления. Кроме того, изменённые версии также обязаны распространяться под этой же свободной лицензией.
Несвободным (проприетарным) программным обеспечением называется ПО, не удовлетворяющее данному определению.
Замечание: не следует путать свободное и бесплатное программное обеспечение: распространяемая бесплатно программа вполне может быть защищена множеством ограничивающих условий и иметь закрытый исходный код. В настоящей работе будет рассматриваться только свободное ПО (в противопоставление несвободному).
2. Сферы применения свободного и несвободного ПО в наше время
Как правило, там, где широко внедряется свободное программное обеспечение, используются свободные операционные системы UNIX-семейства, напр. Linux, FreeBSD, OpenBSD, NetBSD, Solaris. Несвободное программное обеспечение редко используется за пределами несвободных операционных систем семейства Windows. В настоящее время свободное ПО широко используется в наиболее серьёзных компаниях, занятых в IT-индустрии, как-то: Oracle, IBM, Sun, Amazon, RedHat, Яндекс, Google, Cisco, Nokia, SourceForge. Подавляющее большинство серверов используют исключительно свободное программное обеспечение; то же естественным образом переносится и на хостинг-компании. Для задач, в которых надёжность абсолютно необходима, а безграничное доверие к компании-разработчику неприемлемо (банковская сфера и т. д.), используется либо свободное ПО, либо самостоятельно разработанное.
Проприетарное ПО, в свою очередь, используется в компаниях, от IT-сектора достаточно далёких: документооборот, проектирование, дистанционное образование. Это можно объяснить тем, что на этапе создания этих компаний в них может не быть достаточно чёткого видения проблем, которые будут описаны в данной работе (компания не имеет собственных программистов и покупает готовое решение, даже, как будет показано далее в этой работе, на самых невыгодных для неё условиях). Другое возможное объяснение — использование компьютеров некритично для работы компании (для неё приемлема неработоспособность ПО в течение длительного периода времени).
Следует отметить, что наиболее широкой категорией используемых проприетарных приложений являются стандартные средства работы с документами и графикой (так называемые «офисные приложения»). Если используются только они, то граница между ситуациями «компания использует строго свободное ПО» и «компания использует строго проприетарное ПО» размывается, поскольку для каждого из этих приложений существует свободный аналог. Так, GIMP является полным функциональным аналогом Adobe Photoshop, OpenOffice/LibreOffice — полным аналогом Microsoft Office (поддерживая соответствующие форматы документов). Поэтому компания может перевести всё производство на использование свободного ПО без дополнительных расходов времени. Проблемы, описанные в данной работе, более актуальны для программного обеспечения «незаменяемого», то есть разработанного только на проприетарной основе.
3. Список проблем, вызываемых внедрением проприетарного ПО
Классификация недостатков проприетарного ПО достаточно условна, поскольку связанные с ним проблемы взаимосвязаны. В рамках настоящей работы разделим их на следующие категории:
1.    Ненадёжность.
2.  Зависимость от разработчика, отсутствие гибкости.
3. Зависимость от сторонних проприетарных технологий.
4. Дополнительные операционные расходы.
5.  Расходы времени и человеческих ресурсов на перепроектирование в ситуации, когда проприетарное ПО перестаёт устраивать компанию.
Рассмотрим каждую из вышеперечисленных категорий проблем. Приводя примеры к каждой из них, используем в качестве объекта применение проприетарного программного обеспечения Современной Гуманитарной Академией для реализации некоторых аспектов дистанционного образовательного процесса.
3.1. Ненадёжность несвободного ПО
По объективным причинам данная проблема встречается в несвободных программах чрезвычайно часто. Она будет рассмотрена первой как создающая наибольшие неудобства для конечных пользователей.
В несвободном ПО встречаются ошибки, начиная незначительными неудобствами в интерфейсе и заканчивая:
• а) багами — ошибками, серьёзно вредящими работе с программным обеспечением; таковы ошибки, прерывающие производственный цикл предприятия, дающие некорректные результаты на контроле продукции, вызывающие потерю данных.
•   б) уязвимостями безопасности — ошибками, наличие которых позволяет квалифицированному специалисту нарушить работу программного обеспечения.
В некритичных задачах, подобных офисному документообороту, такие проблемы вполне могут быть проигнорированы: даже если программа работает совсем не так, как ожидается (не соответствует поведению, указанному в документации к ней), ошибку, как правило, можно обойти. В серьёзных же задачах, таких как сетевые сервера, работа с базами данных (резервирование билетов, управление банковскими счетами), наличие ошибок в рабочей версии является принципиально неприемлемым.
Разумеется, эпизодические ошибки возможны и в свободном программном обеспечении. Однако существует ряд факторов, которые целенаправленно снижают вероятность ошибок в свободном ПО и повышают в ПО проприетарном.
•    а) Первый фактор — принцип выпуска новых версий программы. Любое программное обеспечение разрабатывается в так называемых системах контроля версий (они записывают промежуточные состояния исходного кода программы). Для свободного программного обеспечения широко распространена общедоступность этой системы (в том числе доступ для просмотра через веб-интерфейс), поэтому пользователь всегда может получить самую последнюю версию — со всеми исправлениями (в том числе ту, в которой исправляли ошибки пять минут назад и которая ещё не выпущена «официально»).
Проприетарное же программное обеспечение выпускается только в так называемых стабильных версиях. Между их выпусками может пройти значительное время, поскольку разработчики считают неразумным выделять отдельную версию каждый раз, когда они исправили две-три опечатки. Тот факт, что эти две-три опечатки могут полностью нарушить рабочий цикл предприятия, как правило, игнорируется в соответствии с логикой «они установили программу с ошибками и терпели работу с ошибками раньше — потерпят ещё». Особенно часты случаи, когда ошибка обнаруживается сразу после выпуска новой версии программы: ущерб может быть нанесён, а следующее обновление запланировано не скоро.
Заметим, что автоматическое обновление, встроенное в программное обеспечение, может только ухудшить проблему — оно может мешать возможности откатить программу к предыдущей версии, которая функционировала корректно.
•  б) Второй фактор — открытость исходного кода в свободном ПО и его закрытость в проприетарном. Действительно, в ситуации, когда код доступен на всеобщее обозрение, вероятность обнаружения ошибки (с определением не только самого факта её существования, но и точного места в коде, где она допущена) повышается в разы. В то же время разработкой проприетарного ПО может заниматься очень небольшая группа программистов, которым нет особой надобности перечитывать написанный ранее код, над которым они сейчас не работают; соответственно, и ошибки там обнаруживаться не будут.
Даже зная о факте существования ошибки, разработчик проприетарного ПО может испытывать сложности с её обнаружением в коде. Разработчику же ПО свободного могут прислать эту информацию непосредственно с сообщением пользователя об ошибке.
•  в) Третий фактор — занятость разработчика. Почти все лицензии на программное обеспечение включают в себя пункт о том, что разработчик не отвечает за проблемы при работе приложения. Соответственно, если компания по разработке ПО продала свою программу A и направила все ресурсы на разработку программы B, а в этот момент в программе A обнаруживается ошибка, требующая существенной работы по исправлению, то маловероятно, что компания примется за это дело; гораздо вероятнее, что её служба поддержки вежливо порекомендует счастливым покупателям терпеть наличие ошибки. В то же время свободное программное обеспечение может исправить не только первоначальный разработчик. Подробнее этот аспект будет рассмотрен в разделе «зависимость от разработчика».
Приведём пример в применении к дистанционным технологиям образования СГА. В таком программном обеспечении, как проверка курсовых и творческих работ на наличие ошибок оформления, система «КОМБАТ» и т. д. существует ряд ошибок, о которых знают все, но которые хронически не исправляются в силу причин, перечисленных выше в данном разделе.
Например, проверка соразмерности глав, которая по документации должна не допускать различия более чем на 5 листов, периодически сообщает об ошибке и при различии на 4 или даже 3 листа. Это существенно ухудшает качество содержания курсовых работ: следует понимать, что курсовая работа — это не переписанный из книжки цельный текст, в котором можно произвольно переставлять заголовки, а серьёзная научная работа, и необходимость сократить наиболее важный раздел на дополнительные два листа может нанести существенный ущерб содержательной части. Неудивительно, что студенты адаптируются к этой ошибке, дописывая по два листа бесполезной ерунды к остальным частям работы.
Достаточно серьёзные недоработки есть и в самой важной части системы «КОМБАТ» — тестах, на которых основаны в том числе экзамены и зачёты. Примером может служить её поведение в вопросах, требующих ввода текстового ответа. Не осуществляется даже тривиального отсечения окончания у вводимого студентом слова: ошибочным может быть признан ответ «треугольник», а правильным считаться «треугольником», ошибочным может быть признан ответ «1», а правильным считаться «единице» (текстом; в вопросах вида «чему равно отношение того-то к тому-то»). Менее всего наличие этих ошибок способствует объективной оценке знаний. Кажется сомнительным, что те «приёмы» в работе, которые студенты используют для обхода ошибок, наличествующих в используемом СГА проприетарном ПО, соответствуют миссии СГА — предоставлению образования высшего качества. Заметим также, что почти все ошибки в используемых в СГА программах (не только перечисленные выше) достаточно тривиальны, то есть могут быть исправлены разработчиком в короткий срок; не происходит этого лишь из-за недостатка организации сбора сообщений об ошибках. Совершенно необходима прямая связь с разработчиками программного обеспечения и оперативное устранение подобных неполадок.
3.2. Зависимость от разработчика
Свободное программное обеспечение может быть исправлено любым программистом с соответствующими навыками. Проприетарное ПО, заказанное в небольшой компании, может быть доработано только сотрудниками этой компании. Если компания каким-то образом не справляется с этой задачей, это создаёт нерешаемую проблему для компании-клиента.
Компания же, работающая со свободным программным обеспечением, в случае отсутствия первоначального разработчика может попросту нанять другого самостоятельно. В наиболее частых случаях (нужно исправить ряд небольших ошибок или добавить в ПО новую функциональность) это даёт максимально быструю реакцию на новые требования компании-клиента. Компания-клиент имеет выбор: она может выбрать лучшего из лучших среди кандидатов-программистов, может нанять целую команду на краткий срок, может обратиться в компанию по разработке ПО с заказом на доработку, а может и вовсе объявить акцию «исправьте нам программу бесплатно и получите футболку с логотипом нашей компании».
Всей этой гибкости при использовании проприетарного ПО попросту нет. Ситуация усугубляется тем, что в большинстве случаев разработчик проприетарного ПО обладает всеми имущественными правами на программу, а продаёт лишь право на использование (определённым сроком, на определённое количество пользователей или компьютеров), поэтому этот разработчик никак не может передать компании-покупателю исходный код, даже если сам не справляется с работой. Компания-клиент не имеет никакого выбора (кроме рассмотренного в пункте 3.5 настоящей работы) и вынуждена это терпеть. Заметим также, что лицензии проприетарного ПО прямо запрещают их модификацию.
Особенно неприятна для компании-клиента ситуация, когда разработчик прекращает свою деятельность (например, отказывается от разработки офисного ПО, которое компания-клиент приобрела, и начинает разрабатывать программы управления истребителями). Даже если программа работала корректно, когда это произошло, со временем она станет всё более и более уступать требованиям сегодняшнего дня, а использующая её компания будет проигрывать конкуренцию компаниям-конкурентам, которые использовали свободное ПО, а после отказа первоначального разработчика от сопровождения программы нашли для этой цели другого разработчика. Рано или поздно компания, которая использует более не сопровождаемое проприетарное ПО, будет вынуждена от него отказаться, понеся потери, рассмотренные в пункте 3.5 настоящей работы.
3.3. Зависимость от сторонних проприетарных технологий
Этот фактор скрыт от глаз большинства клиентов, но тем не менее имеет негативное влияние на компании, использующие проприетарное ПО. Дело в том, что проприетарное ПО зачастую разрабатывается в средах проприетарного ПО и зависит от другого проприетарного ПО.
Примером может служить технология компонентов ActiveX. Программное обеспечение, которое реализовано с её использованием и рассчитано на работу в окне браузера Internet Explorer, противоречит естественному желанию компании-клиента не запускать сам Internet Explorer — браузер с бесчисленным множеством уязвимостей в безопасности, пропускающий львиную долю вредоносного ПО, инфицирующего Windows-системы.
Если рассмотреть более широкую картину, то хорошее программное обеспечение для работы обязано быть и кроссплатформенным: использование такой системы, как Microsoft Windows, в производстве, требующем стабильности, надёжности, безопасности и высокой производительности, является совершенно безответственным. Проприетарное ПО, однако, достаточно редко портируется. Заметим, что даже если некоторое свободное ПО непортабельно, оно может быть портировано программистами-добровольцами впоследствии (будучи первоначально созданным только для одной операционной системы).
Пример проявления этой проблемы в организации дистанционного образования СГА достаточно очевиден. На всех компьютерах, на которых работают студенты, отключены переносимые носители (CD-ROM, флешки). С организационной точки зрения это решение необходимо: Windows-системы, имея множество уязвимостей, с лёгкостью могут быть инфицированы вредоносным ПО (так называемые вирусы) и выведены им из строя, даже если сидящий за компьютером не имеет к нему административного доступа. Однако несложно заметить, что это ограничение мешает, например, студентам самостоятельно отправлять свои курсовые и творческие работы или, наоборот, сохранить себе на флешку копию рабочего учебника. Если бы, с другой стороны, вместо Windows-систем использовались надёжные операционные системы класса UNIX (например, Linux), то в этом ограничении не было бы вообще никакой необходимости: мало того, что подобные операционные системы не имеют уязвимостей, за которые в системе «закрепляются» вирусы, они ещё и в принципе не могут быть уничтожены непривилегированным пользователем. В силу данных факторов вирусы для подобных систем попросту никто не создаёт; даже умышленное вредительство со стороны пользователя не навредит системе.
3.4. Дополнительные операционные расходы
Это самый простой из факторов. Проприетарное ПО платно. Когда компания-клиент его закупает, она может обладать всеми необходимыми средствами (а образовательное учреждение, такое как СГА, может и получить на него значительную скидку), но может не рассчитать своих будущих расходов.
«Подводные камни» оплаты связаны с покупкой лицензии на определённый срок (не бессрочно), с платными обновлениями (даже теми, которые исправляют допущенные в предыдущей версии ошибки), с отменой скидок, с повышением цен компании на техническую поддержку, оказываемую покупателям.
По поводу технической поддержки дополнительно заметим, что техническую поддержку по вопросам использования свободного ПО может оказать бесконечное число квалифицированных программистов, тогда как в случае проприетарного ПО выбор отсутствует — необходимо покупать эту услугу у единственной компании.
С этой проблемой Современная Гуманитарная Академия уже успела столкнуться на практике. Так, изначально курс компьютерной графики был рассчитан на программное обеспечение Adobe Photoshop. Однако срок закупленной лицензии (на копии этой программы, установленные в компьютерных классах) истёк, и дополнительные расходы на её продление оказались нежелательными. Это привело к необходимости переделывать учебные пособия при переключении на использование свободного программного обеспечения — приложений GIMP и OpenOffice Draw.
3.5 Расходы ресурсов на перепроектирование
Приведённый в конце предыдущего раздела пример очень показателен. Если в определённый момент времени проприетарное ПО перестаёт устраивать компанию-клиента, то ей приходится ломать часть привычного производственного цикла, привлекая дополнительные рабочие кадры для перевода производства на свободное ПО.
Особенно неприятна такая ситуация, когда она возникает внезапно (в проприетарном ПО появилась критическая ошибка, компания-разработчик не отвечает, а простой предприятия недопустим — например, такая ситуация возникнет, если система «КОМБАТ» внезапно выключится на три недели непосредственно во время сессии студентов очного отделения СГА). Компании, использующей свободное ПО, достаточно просто исправить ошибку, тогда как компании-пользователю проприетарного ПО придётся решать задачу с нуля.
Заключение
Автор данной работы полагает, что компаниям, уже успевшим внедрить в свою работу проприетарное ПО, следует заблаговременно приступить к поискам возможных замен среди свободного программного обеспечения. В той нестабильной ситуации, которой является зависимость от поставщика несвободного ПО, всегда желательно иметь дополнительный вариант — хотя бы в форме наработки.
Заметим, что у Современной Гуманитарной Академии есть уникальные ресурсы для решения этой задачи, поскольку она является высшим учебным заведением, в котором каждый год студенты специальности «информатика и вычислительная техника» пишут научные работы в областях, связанных с разработкой программного обеспечения; следует поощрять реализацию свободных аналогов программ, используемых в данный момент в СГА, в качестве тем для курсовых работ, диссертаций магистра и бакалавра.
