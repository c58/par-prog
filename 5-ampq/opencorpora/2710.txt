Рефакторинг: график на год
Если раз в неделю делать какую-нибудь фичу или исправлять багу, то за год набежит полсотни позитивных изменений. Если удастся сделать те вещи, которые действительно интересны пользователям, и не просто написать код, но довести его до внедрения, то это будет большой успех для всего проекта.
Проблема в том, что начальную постановку обычно довольно тяжело детализировать до состояния, пригодного к кодированию. А уже сделанные изменения надо ещё протестировать и донести до пользователей. Рефакторинг нужно делать для того, чтобы написание кода не было узким местом, а у разработчиков было время взаимодействовать с коллегами.
Если программист внезапно решил уйти в себя на месяц и перелопатить весь проект, то это существенная потеря управляемости, чреватая большими рисками. Даже один месяц без видимых достижений плохо скажется на результатах за год, поэтому таких ситуаций надо всячески избегать. Но если разработчик вдруг наткнулся на какую-то проблему и ему нужен день-два, чтобы её разгрести, то нет смысла впадать в микроменеджмент — с большой вероятностью эта работа вскоре пригодится.
Большие изменения всегда представляют опасность, потому что могут содержать много скрытых ошибок, которые будет трудно исправить. Нужно уметь разбивать большие задачи на этапы, которые могут быть последовательно сделаны. По собственному опыту знаю, что если выделить в одной большой задаче 10 маленьких подзадач, то после этого работа идёт как по маслу.
Если наладить постоянный процесс разработки с хорошим качеством и приличной скоростью, то можно и ускориться в нужный момент, и добавить человека в команду. Если же всё время упорно получается какая-то ерунда, то авральные работы скорее всего тоже ни к чему хорошему не приведут.
